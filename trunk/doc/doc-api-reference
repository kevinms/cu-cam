                   Class Assignment Manager API Reference

Table of Contents

    1.  Module Listing
        1.1  auth
        1.2  cam-client
        1.3  cam-server
        1.4  command
        1.5  config
        1.6  get
        1.7  list
        1.8  net
        1.9  put
        1.10 stat
        1.11 utils
    2.  Test Cases

--------------------------------------------------------------------------------
1.  Module Listing
--------------------------------------------------------------------------------

1.1  auth

	Addes GnuTLS support ontop of the camp protocol.  This will be useful for
	ensuring that only the admin can send requests to the cam-server.
	
	Functions:
	
	void net_connect_TLS();

1.2  cam-client

	Houses the main() function.  This is where all the functionality from the 
	different modules will be glued together to make the client program. There
	is also a config named 'camclient.rc' that cam-client will load and parse.
	
	Functions:
	
	struct action_t {
		char function;
        int usesGroup;
        struct list_t *serverList;// a list of servers
        struct list_t *sockList;  // a list of sockets
        struct list_t *username;  // a list of char *
        char *fileName;
        char *saveLoc;
	};

	void clientCNTCCode();
	void parseCmdArgs(int argc, char **argv, struct action_t *job);
	int verifyGroup(char **argv, struct action_t *job);
	void openAll(struct action_t *job);
	void closeAll(struct action_t *job);

	void getC(struct action_t *job);
	void putC(struct action_t *job);
	void statC(struct action_t *job);

1.3  cam-server

	Houses the main() function. This is where all the functionality from the 
	different modules will be glued together to make the server program. There
	is also a config named 'camserver.rc' that cam-server will load and parse.

	Functions:
	
	void deamonize();
	void child_exit_signal_handler();
	void CNTC_exit(int signum);

1.4  command

	Whenever the server or client receives a message the command module will
	be used to parse the message into a more manage format.  From there the get
	put and stat modules will be called respectively.

	Functions:

	/* Parsing */
	struct command_t *command_parse(char *buf);
	char *command_parse_string(char **buf);
	struct list_t *command_parse_list(char **buf);

	/* Clean up */
	void command_free(struct command_t *cmd);
	
	Structs:
	
	struct command_t {
		int type;
		int status;
		char *buf;
	};


1.5  config

	Handles completely parsing both the client and server configs. To use it you
	must simply call:
	
	config_load("camserver.rc",CONFIG_SERVER); or
	config_load("camclient.rc",CONFIG_CLIENT);

	Structs:
	
	struct config_group_t {
		char *name;
		struct list_t *servers;
		struct list_t *users;
	};
	
	struct config_server_t
	{
		char *port;
		char *ipv6;
		char *tls;
		int deamon;
	};
	
	struct config_client_t
	{
		int stat_interval;
		char *port;
	
		struct list_t *group;
	};


	Constants:

	#define CONFIG_SERVER 0
	#define CONFIG_CLIENT 1

	Functions:
	
	/* globals */
	extern struct config_server_t *server;
	extern struct config_client_t *client;
	
	/* rc file types */
	void config_load(char *rcfile, int type);
	
	/* config types */
	struct config_server_t *config_parse_server(FILE *in);
	struct config_client_t *config_parse_client(FILE *in);
	
	/* section types */
	struct config_group_t *config_parse_group(FILE *in);
	
	/* entry types */
	void config_read_key(FILE *in);
	struct list_t *config_read_list(FILE *in);
	char *config_read_string(FILE *in);
	char *config_read_value(FILE *in);

1.6  get
	
	Used by the sever and client to send get requests and handle them.
	
	Functions:
	
	void get_handle(int sock, struct command_t *cmd);
	int get_request(struct net_t *n, struct list_t *list, char *fileName, char *saveLoc);

1.7  list

	Implements the linked list data structure.

	Stucts:
	
	struct link_t
	{
	   struct link_t *next;  /* Next link in the list */
	   struct link_t *prev;  /* Previous link in the list */
	   void          *item;  /* Item owned by this link */
	};
	
	struct list_t
	{
	   int len;              /* Number of elements in list */
	   struct link_t  *head; /* First link in the list */
	   struct link_t  *tail; /* Last link in the list  */
	};
	
	Functions:
	
	/* list management */
	struct list_t *list_init(void);
	void list_add(struct list_t *list, void *item);
	void list_del_item(struct list_t *list, void *entity);
	int list_del_head(struct list_t *list);
	void list_del(struct list_t *list);
	void list_tail_to_head(struct list_t *list);
	void list_head_to_tail(struct list_t *list);

	/* returns 0 for no, 1 for yes */
	int list_is_in(struct list_t *list, void *item);

1.8  net

	This module houses the functions to network two programs

	Structs:
	
	struct net_t {
		int sock;                  /* Socket file descriptor */
		unsigned short port;       /* Port number*/
		struct addrinfo hints;     /* Address info IP version agnostic*/
		struct addrinfo *servinfo; /* Filled after a getaddrinfo() */
		struct timeval tv;         /* */
		char *servIP;              /* IP address of server */
	
		struct net_t *next;
	};
	
	Functions:
	
	/* setup a socket */
	struct net_t *net_create_tcp_socket(char *node, char *service);
	struct net_t *net_create_udp_socket(char *node, char *service);
	
	/* server bind to port */
	void net_bind(struct net_t *n);

	/* server list on port */
	void net_listen(struct net_t *n);

	/* client connect to tcp server */
	int net_connect(struct net_t *n);

	/* server accept tcp client */
	int net_accept_tcp_client(int fd);

	/* handle tcp & udp clients */
	void net_handle_tcp_client(int fd);
	void net_handle_udp_client(int fd);

	/* send/recv tcp */
	int net_send_tcp(int sock, char *buf, int size);
	char *net_recv_tcp(int sock);

	/* send/recv udp */
	void net_sendto_udp(struct net_t *n);
	char *net_recvfrom_udp(struct net_t *n);

	/* send smaller fragments of data each with the specified header*/
	int net_send_fragments_tcp(int sock, char *buf, int bufsize, int blocksize);
	int net_recv_fragments_tcp(int sock, char **buf, int bufsize);

	/* free struct net_t */
	void net_free(struct net_t *n);

1.9  put

	Used by the server and client to send put requets and handle them.

	Functions:
	
    void put_handle(int sock, struct command_t *cmd);
    int put_request(struct net_t *n, struct list_t *list, char *fileName, char *saveLoc);

1.10 stat

	Used by the server and client to send stat requests and handle them.

	Functions:
	
	void stat_handle(int sock, struct command_t *cmd);
	void stat_request(struct net_t *n, struct list_t *userName, char flag);
	char *runCommand_getResults(char *command, int sock, struct command_t *cmd);

1.11 utils

	Random utility functions that do not belong in other modules or that are 
	widely used.

	Functions:
	
	int split_string(char *buf, char **seg);
	char *p_strcpy(char *str);
	int search_match(char **tree, char *apple);
	int list_lookup_string(struct list_t *list, char *name);
	double getTime();
	void die_with_error(char *error_message);
	int fsize(const char *f);
	int fcheck_for_user(const char *user);
	int fcheck_for_file(const char *file);
	char * fileFromPath(char * path);
	
--------------------------------------------------------------------------------
2.  Test Cases
--------------------------------------------------------------------------------

auth-test     ! Tests the authentication/encryption system.
command-test  ! Basically is a hard coded fuzzer that tests about 40 different
				cases.
config-test   ! Makes sure all config entries are read in correctly into their
				respective data structures.
